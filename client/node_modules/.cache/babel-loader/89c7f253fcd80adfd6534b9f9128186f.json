{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: (arg, queryApi, extraOptions) => {\n        const socket = io('http://localhost:4000');\n        socket.emit('start');\n        socket.on('ticker', data => console.log(data));\n        if (data1) return {\n          data: data1\n        };else return {\n          error: 'fuck'\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","arg","queryApi","extraOptions","socket","emit","on","data","console","log","data1","error","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErC;AACAC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,YAAhB,KAAiC;AACxC,cAAMC,MAAM,GAAGX,EAAE,CAAC,uBAAD,CAAjB;AACAW,QAAAA,MAAM,CAACC,IAAP,CAAY,OAAZ;AACAD,QAAAA,MAAM,CAACE,EAAP,CAAU,QAAV,EAAqBC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAA9B;AACA,YAAIG,KAAJ,EACA,OAAO;AAACH,UAAAA,IAAI,EAAEG;AAAP,SAAP,CADA,KAEK,OAAO;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAP;AACN;AARsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAkBP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAwBlB,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: (arg, queryApi, extraOptions) => {\n        const socket = io('http://localhost:4000')\n        socket.emit('start')\n        socket.on('ticker', (data) => console.log(data))\n        if (data1) \n        return {data: data1}\n        else return {error: 'fuck'}\n      }\n     \n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}