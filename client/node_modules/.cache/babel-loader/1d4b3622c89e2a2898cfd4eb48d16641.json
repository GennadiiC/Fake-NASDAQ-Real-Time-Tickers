{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(arg, _ref) {\n        let {\n          updateCachedData,\n          cacheEntryRemoved\n        } = _ref;\n        const socketServer = io('http://localhost:4000');\n        socketServer.emit('connection', socket => {\n          socket.emit('start', arg);\n          socket.on('ticker', data => {\n            updateCachedData(draft => {\n              draft.push(data);\n\n              if (draft.length > 1) {\n                draft.shift();\n                return draft;\n              }\n            });\n          });\n        }); // socket.emit('start', arg) \n        // socket.on('ticker', (data) => {\n        //   updateCachedData((draft) => {\n        //     draft.push(data)\n        //     if (draft.length > 1) {\n        //       draft.shift()\n        //       return draft\n        //     }\n        //   })\n        // })\n\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"names":["createApi","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","arg","updateCachedData","cacheEntryRemoved","socketServer","emit","socket","on","draft","push","length","shift","useGetStocksQuery"],"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded(arg, { updateCachedData, cacheEntryRemoved }) {\n        const socketServer = io('http://localhost:4000')\n        socketServer.emit('connection', (socket) => {\n          socket.emit('start', arg) \n        \n          socket.on('ticker', (data) => {\n        \n            updateCachedData((draft) => {\n              draft.push(data)\n              if (draft.length > 1) {\n                draft.shift()\n                return draft\n              }\n            })\n          })\n        })\n        // socket.emit('start', arg) \n        \n        // socket.on('ticker', (data) => {\n      \n        //   updateCachedData((draft) => {\n        //     draft.push(data)\n        //     if (draft.length > 1) {\n        //       draft.shift()\n        //       return draft\n        //     }\n        //   })\n        // })\n        await cacheEntryRemoved\n      }\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAGA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACrCG,WAAW,EAAE,eADwB;EAErCC,SAAS,EAAEC,OAAO,KAAK;IACrBC,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;MACvBC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAR,CAAP,CADc;;MAEvB,MAAMC,iBAAN,CAAwBC,GAAxB,QAAsE;QAAA,IAAzC;UAAEC,gBAAF;UAAoBC;QAApB,CAAyC;QACpE,MAAMC,YAAY,GAAGb,EAAE,CAAC,uBAAD,CAAvB;QACAa,YAAY,CAACC,IAAb,CAAkB,YAAlB,EAAiCC,MAAD,IAAY;UAC1CA,MAAM,CAACD,IAAP,CAAY,OAAZ,EAAqBJ,GAArB;UAEAK,MAAM,CAACC,EAAP,CAAU,QAAV,EAAqBR,IAAD,IAAU;YAE5BG,gBAAgB,CAAEM,KAAD,IAAW;cAC1BA,KAAK,CAACC,IAAN,CAAWV,IAAX;;cACA,IAAIS,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;gBACpBF,KAAK,CAACG,KAAN;gBACA,OAAOH,KAAP;cACD;YACF,CANe,CAAhB;UAOD,CATD;QAUD,CAbD,EAFoE,CAgBpE;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QACA,MAAML,iBAAN;MACD;;IA/BsB,CAAd;EADU,CAAL;AAFmB,CAAD,CAA/B;AAuCP,OAAO,MAAM;EAAES;AAAF,IAAwBpB,aAA9B"},"metadata":{},"sourceType":"module"}