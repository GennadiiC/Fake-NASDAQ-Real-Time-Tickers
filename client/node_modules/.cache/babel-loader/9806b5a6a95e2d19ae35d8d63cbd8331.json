{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(args, _ref) {\n        let {\n          updateCachedData,\n          cacheEntryRemoved\n        } = _ref;\n        const socket = io('http://localhost:4000');\n        console.log(args);\n        socket.emit('start', args[0]);\n\n        if (args[1] !== '') {\n          socket.emit('add', args[1]);\n        }\n\n        socket.on('ticker', data => {\n          updateCachedData(draft => {\n            draft.push(data.filter(item => item.ticker !== args[1]));\n\n            if (draft.length > 1) {\n              draft.shift();\n              return draft;\n            }\n          });\n        });\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"names":["createApi","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","args","updateCachedData","cacheEntryRemoved","socket","console","log","emit","on","draft","push","filter","item","ticker","length","shift","useGetStocksQuery"],"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded(args, { updateCachedData, cacheEntryRemoved }) {\n        const socket = io('http://localhost:4000')\n        console.log(args)\n        socket.emit('start', args[0]) \n        if (args[1] !== '') {\n          socket.emit('add', args[1])\n        }\n        \n        socket.on('ticker', (data) => {\n      \n          updateCachedData((draft) => {\n            draft.push(data.filter(item => item.ticker !== args[1]))\n            if (draft.length > 1) {\n              draft.shift()\n              return draft\n            }\n          })\n        })\n        await cacheEntryRemoved\n      }\n    }),\n  }),\n})\n\n\nexport const { useGetStocksQuery } = stockApiSlice;"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAGA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACrCG,WAAW,EAAE,eADwB;EAErCC,SAAS,EAAEC,OAAO,KAAK;IACrBC,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;MACvBC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAR,CAAP,CADc;;MAEvB,MAAMC,iBAAN,CAAwBC,IAAxB,QAAuE;QAAA,IAAzC;UAAEC,gBAAF;UAAoBC;QAApB,CAAyC;QACrE,MAAMC,MAAM,GAAGb,EAAE,CAAC,uBAAD,CAAjB;QACAc,OAAO,CAACC,GAAR,CAAYL,IAAZ;QACAG,MAAM,CAACG,IAAP,CAAY,OAAZ,EAAqBN,IAAI,CAAC,CAAD,CAAzB;;QACA,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,EAAhB,EAAoB;UAClBG,MAAM,CAACG,IAAP,CAAY,KAAZ,EAAmBN,IAAI,CAAC,CAAD,CAAvB;QACD;;QAEDG,MAAM,CAACI,EAAP,CAAU,QAAV,EAAqBT,IAAD,IAAU;UAE5BG,gBAAgB,CAAEO,KAAD,IAAW;YAC1BA,KAAK,CAACC,IAAN,CAAWX,IAAI,CAACY,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBZ,IAAI,CAAC,CAAD,CAAxC,CAAX;;YACA,IAAIQ,KAAK,CAACK,MAAN,GAAe,CAAnB,EAAsB;cACpBL,KAAK,CAACM,KAAN;cACA,OAAON,KAAP;YACD;UACF,CANe,CAAhB;QAOD,CATD;QAUA,MAAMN,iBAAN;MACD;;IArBsB,CAAd;EADU,CAAL;AAFmB,CAAD,CAA/B;AA8BP,OAAO,MAAM;EAAEa;AAAF,IAAwBxB,aAA9B"},"metadata":{},"sourceType":"module"}