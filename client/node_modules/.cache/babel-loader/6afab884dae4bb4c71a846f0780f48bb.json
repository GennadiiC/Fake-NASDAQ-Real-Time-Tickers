{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/'\n  }),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      query: () => '',\n\n      async onCacheEntryAdded(arg, {\n        updateCachedData,\n        cacheDataLoaded,\n        cacheEntryRemoved\n      }) {\n        try {\n          await cacheDataLoaded;\n          const socket = io('http://localhost:4000');\n          console.log(socket.connection);\n\n          const listener = event => {\n            const data = JSON.parse(event.data);\n            if (data !== arg) return;\n            updateCachedData(draft => {\n              draft.push(data);\n            });\n          };\n\n          socket.on('start', listener);\n        } catch {}\n\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","baseQuery","baseUrl","endpoints","builder","getStocks","query","onCacheEntryAdded","arg","updateCachedData","cacheDataLoaded","cacheEntryRemoved","socket","console","log","connection","listener","event","data","JSON","parse","draft","push","on","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErCC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFY;AAGrCC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBA,MAAAA,KAAK,EAAE,MAAM,EADU;;AAEvB,YAAMC,iBAAN,CACEC,GADF,EAEE;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCC,QAAAA;AAArC,OAFF,EAGE;AAEA,YAAI;AACF,gBAAMD,eAAN;AACA,gBAAME,MAAM,GAAGd,EAAE,CAAC,uBAAD,CAAjB;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,UAAnB;;AAGA,gBAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,kBAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,IAAjB,CAAb;AACA,gBAAKA,IAAI,KAAKV,GAAd,EAAoB;AAEpBC,YAAAA,gBAAgB,CAAEY,KAAD,IAAW;AAC1BA,cAAAA,KAAK,CAACC,IAAN,CAAWJ,IAAX;AACD,aAFe,CAAhB;AAGD,WAPD;;AASAN,UAAAA,MAAM,CAACW,EAAP,CAAU,OAAV,EAAmBP,QAAnB;AACD,SAhBD,CAgBE,MAAM,CAEP;;AACD,cAAML,iBAAN;AAED;;AA5BsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAqCP,OAAO,MAAM;AAAEa,EAAAA;AAAF,IAAwBzB,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      query: () => '',\n      async onCacheEntryAdded(\n        arg, \n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n    \n        try {\n          await cacheDataLoaded;\n          const socket = io('http://localhost:4000');\n          console.log(socket.connection)\n\n\n          const listener = (event) => {\n            const data = JSON.parse(event.data)\n            if ( data !== arg ) return\n\n            updateCachedData((draft) => {\n              draft.push(data)\n            })\n          }\n\n          socket.on('start', listener)\n        } catch {\n\n        }\n        await cacheEntryRemoved;\n        \n      },\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}