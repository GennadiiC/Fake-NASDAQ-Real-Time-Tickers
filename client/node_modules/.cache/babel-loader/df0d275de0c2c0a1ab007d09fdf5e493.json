{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: async (arg, queryApi, extraOptions) => {\n        const socket = io('http://localhost:4000');\n        const data1 = await socket.on('ticker', data => data1.push(data));\n        return {\n          data: data1\n        };\n      } // async onCacheEntryAdded(args, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {\n      //   const socket = io('http://localhost:4000')\n      //   try {\n      //     await cacheDataLoaded\n      //     const listener = (event) => {\n      //       // const data = JSON.parse(event.data)\n      //       // if (!data || data.channel !== args) return\n      //       updateCachedData((draft) => {\n      //         draft.push(event.data)\n      //       })\n      //     }\n      //     socket.on('ticker', data => console.log(data))\n      //   } catch {\n      //   }\n      //   await cacheEntryRemoved\n      //   socket.close();\n      // }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","arg","queryApi","extraOptions","socket","data1","on","data","push","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErC;AACAC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,OAAOC,GAAP,EAAYC,QAAZ,EAAsBC,YAAtB,KAAuC;AAC9C,cAAMC,MAAM,GAAGX,EAAE,CAAC,uBAAD,CAAjB;AACA,cAAMY,KAAK,GAAG,MAAMD,MAAM,CAACE,EAAP,CAAU,QAAV,EAAqBC,IAAI,IAAIF,KAAK,CAACG,IAAN,CAAWD,IAAX,CAA7B,CAApB;AACA,eAAO;AAACA,UAAAA,IAAI,EAAEF;AAAP,SAAP;AACD,OALsB,CAMvB;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AA7BuB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAsCP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAwBf,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: async (arg, queryApi, extraOptions) => {\n        const socket = io('http://localhost:4000')\n        const data1 = await socket.on('ticker', (data => data1.push(data)))\n        return {data: data1}\n      }\n      // async onCacheEntryAdded(args, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {\n\n      //   const socket = io('http://localhost:4000')\n\n      //   try {\n      //     await cacheDataLoaded\n\n      //     const listener = (event) => {\n      //       // const data = JSON.parse(event.data)\n      //       // if (!data || data.channel !== args) return\n\n      //       updateCachedData((draft) => {\n      //         draft.push(event.data)\n      //       })\n      //     }\n\n      //     socket.on('ticker', data => console.log(data))\n      //   } catch {\n\n      //   }\n      //   await cacheEntryRemoved\n      //   socket.close();\n        \n      // }\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}