{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(args, {\n        updateCachedData,\n        cacheDataLoaded,\n        cacheEntryRemoved\n      }) {\n        const socket = io('http://localhost:4000');\n\n        try {\n          await cacheDataLoaded;\n\n          const listener = event => {\n            // const data = JSON.parse(event.data)\n            // if (!data || data.channel !== args) return\n            updateCachedData(draft => {\n              draft.push(event.data);\n            });\n          };\n\n          socket.on('ticker', data => console.log(data));\n        } catch {}\n\n        await cacheEntryRemoved;\n        socket.close();\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","args","updateCachedData","cacheDataLoaded","cacheEntryRemoved","socket","listener","event","draft","push","on","console","log","close","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErC;AACAC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,OAAO;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAP,CADc;;AAEvB,YAAMC,iBAAN,CAAwBC,IAAxB,EAA8B;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCC,QAAAA;AAArC,OAA9B,EAAwF;AAEtF,cAAMC,MAAM,GAAGd,EAAE,CAAC,uBAAD,CAAjB;;AAEA,YAAI;AACF,gBAAMY,eAAN;;AAEA,gBAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA;AAEAL,YAAAA,gBAAgB,CAAEM,KAAD,IAAW;AAC1BA,cAAAA,KAAK,CAACC,IAAN,CAAWF,KAAK,CAACR,IAAjB;AACD,aAFe,CAAhB;AAGD,WAPD;;AASAM,UAAAA,MAAM,CAACK,EAAP,CAAU,QAAV,EAAoBX,IAAI,IAAIY,OAAO,CAACC,GAAR,CAAYb,IAAZ,CAA5B;AACD,SAbD,CAaE,MAAM,CAEP;;AACD,cAAMK,iBAAN;AACAC,QAAAA,MAAM,CAACQ,KAAP;AAED;;AAzBsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAkCP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAwBtB,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded(args, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {\n\n        const socket = io('http://localhost:4000')\n\n        try {\n          await cacheDataLoaded\n\n          const listener = (event) => {\n            // const data = JSON.parse(event.data)\n            // if (!data || data.channel !== args) return\n\n            updateCachedData((draft) => {\n              draft.push(event.data)\n            })\n          }\n\n          socket.on('ticker', data => console.log(data))\n        } catch {\n\n        }\n        await cacheEntryRemoved\n        socket.close();\n        \n      }\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}