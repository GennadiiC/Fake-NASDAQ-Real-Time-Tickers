{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/'\n  }),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      query: channel => `messages/${channel}`,\n\n      async onCacheEntryAdded(arg, {\n        updateCachedData,\n        cacheDataLoaded,\n        cacheEntryRemoved\n      }) {\n        const ws = new WebSocket('ws://localhost:4000');\n\n        try {\n          await cacheDataLoaded;\n\n          const listener = event => {\n            const data = JSON.parse(event.data);\n            if (io(data) || data.channel !== arg) return;\n            updateCachedData(draft => {\n              draft.push(data);\n            });\n          };\n\n          ws.addEventListener('connection', listener);\n        } catch {}\n\n        await cacheEntryRemoved;\n        ws.close();\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","stockApiSlice","reducerPath","baseQuery","baseUrl","endpoints","builder","getStocks","query","channel","onCacheEntryAdded","arg","updateCachedData","cacheDataLoaded","cacheEntryRemoved","ws","WebSocket","listener","event","data","JSON","parse","io","draft","push","addEventListener","close","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;AACrCG,EAAAA,WAAW,EAAE,eADwB;AAErCC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AAAEI,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFY;AAGrCC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBA,MAAAA,KAAK,EAAGC,OAAD,IAAc,YAAWA,OAAQ,EADjB;;AAEvB,YAAMC,iBAAN,CACEC,GADF,EAEE;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCC,QAAAA;AAArC,OAFF,EAGE;AACA,cAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,qBAAd,CAAX;;AACA,YAAI;AACF,gBAAMH,eAAN;;AAEA,gBAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC1B,kBAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,IAAjB,CAAb;AACA,gBAAKG,EAAE,CAACH,IAAD,CAAF,IAAYA,IAAI,CAACV,OAAL,KAAiBE,GAAlC,EAAwC;AAExCC,YAAAA,gBAAgB,CAAEW,KAAD,IAAW;AAC1BA,cAAAA,KAAK,CAACC,IAAN,CAAWL,IAAX;AACD,aAFe,CAAhB;AAGD,WAPD;;AASAJ,UAAAA,EAAE,CAACU,gBAAH,CAAoB,YAApB,EAAkCR,QAAlC;AACD,SAbD,CAaE,MAAM,CAEP;;AACD,cAAMH,iBAAN;AACAC,QAAAA,EAAE,CAACW,KAAH;AACD;;AAzBsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAkCP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAwB1B,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      query: (channel) => `messages/${channel}`,\n      async onCacheEntryAdded(\n        arg, \n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        const ws = new WebSocket('ws://localhost:4000')\n        try {\n          await cacheDataLoaded;\n\n          const listener = (event) => {\n            const data = JSON.parse(event.data)\n            if ( io(data) || data.channel !== arg ) return\n\n            updateCachedData((draft) => {\n              draft.push(data)\n            })\n          }\n\n          ws.addEventListener('connection', listener)\n        } catch {\n\n        }\n        await cacheEntryRemoved\n        ws.close()\n      },\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}