{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/'\n  }),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(args, {\n        updateCachedData,\n        cacheDataLoaded,\n        cacheEntryRemoved\n      }) {\n        const socket = io('http://localhost:4000', {\n          path: '/socket.io'\n        });\n\n        try {\n          await cacheDataLoaded;\n\n          const listener = event => {\n            const data = JSON.parse(event.data);\n            if (!data || data.channel !== args) return;\n            updateCachedData(draft => {\n              draft.push(data);\n            });\n          };\n\n          socket.on('ticker', listener);\n        } catch {}\n\n        await cacheEntryRemoved;\n        socket.close();\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","baseQuery","baseUrl","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","args","updateCachedData","cacheDataLoaded","cacheEntryRemoved","socket","path","listener","event","JSON","parse","channel","draft","push","on","close","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErCC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFY;AAGrCC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,OAAO;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAP,CADc;;AAEvB,YAAMC,iBAAN,CAAwBC,IAAxB,EAA8B;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCC,QAAAA;AAArC,OAA9B,EAAwF;AAEtF,cAAMC,MAAM,GAAGhB,EAAE,CAAC,uBAAD,EAA0B;AACzCiB,UAAAA,IAAI,EAAE;AADmC,SAA1B,CAAjB;;AAIA,YAAI;AACF,gBAAMH,eAAN;;AAEA,gBAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC1B,kBAAMT,IAAI,GAAGU,IAAI,CAACC,KAAL,CAAWF,KAAK,CAACT,IAAjB,CAAb;AACA,gBAAI,CAACA,IAAD,IAASA,IAAI,CAACY,OAAL,KAAiBV,IAA9B,EAAoC;AAEpCC,YAAAA,gBAAgB,CAAEU,KAAD,IAAW;AAC1BA,cAAAA,KAAK,CAACC,IAAN,CAAWd,IAAX;AACD,aAFe,CAAhB;AAGD,WAPD;;AASAM,UAAAA,MAAM,CAACS,EAAP,CAAU,QAAV,EAAoBP,QAApB;AACD,SAbD,CAaE,MAAM,CAEP;;AACD,cAAMH,iBAAN;AACAC,QAAAA,MAAM,CAACU,KAAP;AAED;;AA3BsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAoCP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAwB1B,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded(args, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {\n\n        const socket = io('http://localhost:4000', {\n          path: '/socket.io'\n        })\n\n        try {\n          await cacheDataLoaded\n\n          const listener = (event) => {\n            const data = JSON.parse(event.data)\n            if (!data || data.channel !== args) return\n\n            updateCachedData((draft) => {\n              draft.push(data)\n            })\n          }\n\n          socket.on('ticker', listener)\n        } catch {\n\n        }\n        await cacheEntryRemoved\n        socket.close();\n        \n      }\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}