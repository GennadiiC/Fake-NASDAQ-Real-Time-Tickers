{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(_ref, _ref2) {\n        let [interval, newEntry, id] = _ref;\n        let {\n          updateCachedData,\n          cacheEntryRemoved\n        } = _ref2;\n        const socket = io('http://localhost:4000');\n        socket.emit('start', interval);\n\n        if (newEntry !== '') {\n          socket.emit('add', newEntry);\n        }\n\n        if (id !== '') {\n          socket.emit('delete', id);\n        }\n\n        socket.on('ticker', data => {\n          updateCachedData(draft => {\n            draft.push(data);\n\n            if (draft.length > 1) {\n              draft.shift();\n              return draft;\n            }\n          });\n        });\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"names":["createApi","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","interval","newEntry","id","updateCachedData","cacheEntryRemoved","socket","emit","on","draft","push","length","shift","useGetStocksQuery"],"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded([interval, newEntry, id], { updateCachedData, cacheEntryRemoved }) {\n        const socket = io('http://localhost:4000')\n\n        socket.emit('start', interval) \n\n        if (newEntry !== '') {\n          socket.emit('add', newEntry)\n        }\n\n        if (id !== '') {\n          socket.emit('delete', id)\n        }\n        \n        socket.on('ticker', (data) => {\n      \n          updateCachedData((draft) => {\n            draft.push(data)\n            if (draft.length > 1) {\n              draft.shift()\n              return draft\n            }\n          })\n        })\n        await cacheEntryRemoved\n      }\n    }),\n  }),\n})\n\n\nexport const { useGetStocksQuery } = stockApiSlice;"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAGA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACrCG,WAAW,EAAE,eADwB;EAErCC,SAAS,EAAEC,OAAO,KAAK;IACrBC,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;MACvBC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAR,CAAP,CADc;;MAEvB,MAAMC,iBAAN,cAA2F;QAAA,IAAnE,CAACC,QAAD,EAAWC,QAAX,EAAqBC,EAArB,CAAmE;QAAA,IAAzC;UAAEC,gBAAF;UAAoBC;QAApB,CAAyC;QACzF,MAAMC,MAAM,GAAGf,EAAE,CAAC,uBAAD,CAAjB;QAEAe,MAAM,CAACC,IAAP,CAAY,OAAZ,EAAqBN,QAArB;;QAEA,IAAIC,QAAQ,KAAK,EAAjB,EAAqB;UACnBI,MAAM,CAACC,IAAP,CAAY,KAAZ,EAAmBL,QAAnB;QACD;;QAED,IAAIC,EAAE,KAAK,EAAX,EAAe;UACbG,MAAM,CAACC,IAAP,CAAY,QAAZ,EAAsBJ,EAAtB;QACD;;QAEDG,MAAM,CAACE,EAAP,CAAU,QAAV,EAAqBT,IAAD,IAAU;UAE5BK,gBAAgB,CAAEK,KAAD,IAAW;YAC1BA,KAAK,CAACC,IAAN,CAAWX,IAAX;;YACA,IAAIU,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;cACpBF,KAAK,CAACG,KAAN;cACA,OAAOH,KAAP;YACD;UACF,CANe,CAAhB;QAOD,CATD;QAUA,MAAMJ,iBAAN;MACD;;IA1BsB,CAAd;EADU,CAAL;AAFmB,CAAD,CAA/B;AAmCP,OAAO,MAAM;EAAEQ;AAAF,IAAwBrB,aAA9B"},"metadata":{},"sourceType":"module"}