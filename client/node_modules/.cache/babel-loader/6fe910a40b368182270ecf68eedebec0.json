{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst stocksSlice = createSlice({\n  name: 'stocks',\n  initialState: {\n    interval: 5000,\n    cachedTickers: [],\n    newEntry: '',\n    toRemove: ''\n  },\n  reducers: {\n    changeInterval: (state, action) => {\n      state.interval = action.payload;\n    },\n    setCachedTicker: (state, action) => {\n      state.cachedTickers.push(action.payload);\n    },\n    filterCachedTickers: (state, action) => {\n      state.cachedTickers = state.cachedTickers.filter(tick => tick.id !== action.payload.id);\n    },\n    setNewTicker: (state, action) => {\n      if (state.newEntry !== action.payload) {\n        state.newEntry = action.payload;\n      }\n    },\n    setToRemove: (state, action) => {\n      if (state.toRemove !== action.payload) {\n        state.toRemove = action.payload;\n        console.log(state.toRemove);\n      }\n    }\n  }\n});\nexport const {\n  changeInterval,\n  setCachedTicker,\n  filterCachedTickers,\n  setNewTicker,\n  setToRemove\n} = stocksSlice.actions;\nexport default stocksSlice.reducer;","map":{"version":3,"names":["createSlice","stocksSlice","name","initialState","interval","cachedTickers","newEntry","toRemove","reducers","changeInterval","state","action","payload","setCachedTicker","push","filterCachedTickers","filter","tick","id","setNewTicker","setToRemove","console","log","actions","reducer"],"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nconst stocksSlice = createSlice({\n  name: 'stocks',\n  initialState: {\n    interval: 5000,\n    cachedTickers: [],\n    newEntry: '',\n    toRemove: ''\n\n  },\n  reducers: {\n    changeInterval: (state, action) => {\n      state.interval = action.payload\n    }, \n    setCachedTicker: (state, action) => {\n      state.cachedTickers.push(action.payload)\n    },\n    filterCachedTickers: (state, action) => {\n      state.cachedTickers = state.cachedTickers.filter(tick => \n        tick.id !== action.payload.id\n      )\n    },\n    setNewTicker: (state, action) => {\n      if (state.newEntry !== action.payload) {\n        state.newEntry = action.payload\n      }\n    },\n    setToRemove: (state, action) => {\n      if (state.toRemove !== action.payload) {\n        state.toRemove = action.payload\n        console.log(state.toRemove)\n      }\n    }\n  \n  }\n})\n\n\nexport const { \n  changeInterval, \n  setCachedTicker, \n  filterCachedTickers, \n  setNewTicker, \n  setToRemove \n} = stocksSlice.actions\n\nexport default stocksSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,WAAW,GAAGD,WAAW,CAAC;EAC9BE,IAAI,EAAE,QADwB;EAE9BC,YAAY,EAAE;IACZC,QAAQ,EAAE,IADE;IAEZC,aAAa,EAAE,EAFH;IAGZC,QAAQ,EAAE,EAHE;IAIZC,QAAQ,EAAE;EAJE,CAFgB;EAS9BC,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACjCD,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;IACD,CAHO;IAIRC,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;MAClCD,KAAK,CAACL,aAAN,CAAoBS,IAApB,CAAyBH,MAAM,CAACC,OAAhC;IACD,CANO;IAORG,mBAAmB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;MACtCD,KAAK,CAACL,aAAN,GAAsBK,KAAK,CAACL,aAAN,CAAoBW,MAApB,CAA2BC,IAAI,IACnDA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAP,CAAeM,EADP,CAAtB;IAGD,CAXO;IAYRC,YAAY,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;MAC/B,IAAID,KAAK,CAACJ,QAAN,KAAmBK,MAAM,CAACC,OAA9B,EAAuC;QACrCF,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACC,OAAxB;MACD;IACF,CAhBO;IAiBRQ,WAAW,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;MAC9B,IAAID,KAAK,CAACH,QAAN,KAAmBI,MAAM,CAACC,OAA9B,EAAuC;QACrCF,KAAK,CAACH,QAAN,GAAiBI,MAAM,CAACC,OAAxB;QACAS,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACH,QAAlB;MACD;IACF;EAtBO;AAToB,CAAD,CAA/B;AAqCA,OAAO,MAAM;EACXE,cADW;EAEXI,eAFW;EAGXE,mBAHW;EAIXI,YAJW;EAKXC;AALW,IAMTnB,WAAW,CAACsB,OANT;AAQP,eAAetB,WAAW,CAACuB,OAA3B"},"metadata":{},"sourceType":"module"}