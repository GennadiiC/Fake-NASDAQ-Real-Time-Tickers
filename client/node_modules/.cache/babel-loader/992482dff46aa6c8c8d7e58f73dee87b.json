{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: []\n      }),\n\n      async onCacheEntryAdded(arg, {\n        updateCachedData,\n        cacheEntryRemoved\n      }) {\n        const socket = io.connect('http://localhost:4000');\n        socket.emit('start');\n        socket.on('ticker', data => {\n          updateCachedData(draft => {\n            draft.push(data);\n          });\n        });\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","endpoints","builder","getStocks","query","queryFn","data","onCacheEntryAdded","arg","updateCachedData","cacheEntryRemoved","socket","connect","emit","on","draft","push","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErC;AACAC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,OAAO;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAP,CADc;;AAEvB,YAAMC,iBAAN,CAAwBC,GAAxB,EAA6B;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA;AAApB,OAA7B,EAAsE;AACpE,cAAMC,MAAM,GAAGb,EAAE,CAACc,OAAH,CAAW,uBAAX,CAAf;AACAD,QAAAA,MAAM,CAACE,IAAP,CAAY,OAAZ;AACAF,QAAAA,MAAM,CAACG,EAAP,CAAU,QAAV,EAAqBR,IAAD,IAAU;AAC5BG,UAAAA,gBAAgB,CAAEM,KAAD,IAAW;AAC1BA,YAAAA,KAAK,CAACC,IAAN,CAAWV,IAAX;AACD,WAFe,CAAhB;AAGD,SAJD;AAKA,cAAMI,iBAAN;AACD;;AAXsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAqBP,OAAO,MAAM;AAAEO,EAAAA;AAAF,IAAwBlB,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  // baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: [] }),\n      async onCacheEntryAdded(arg, { updateCachedData, cacheEntryRemoved }) {\n        const socket = io.connect('http://localhost:4000')\n        socket.emit('start')\n        socket.on('ticker', (data) => {\n          updateCachedData((draft) => {\n            draft.push(data)\n          })\n        })\n        await cacheEntryRemoved\n      }\n     \n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}