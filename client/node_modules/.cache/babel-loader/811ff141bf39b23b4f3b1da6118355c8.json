{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/'\n  }),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({\n        data: {\n          tickers: []\n        }\n      }),\n\n      async onCacheEntryAdded(arg, {\n        updateCachedData,\n        cacheDataLoaded,\n        cacheEntryRemoved\n      }) {\n        try {\n          await cacheDataLoaded;\n          const socket = io('http://localhost:4000');\n          socket.on('connection', () => {\n            console.log('connected');\n          });\n          socket.on('start', () => {\n            console.log('started');\n          }); // const listener = (event) => {\n          //   const data = JSON.parse(event.data)\n          //   if ( data !== arg ) return\n          //   updateCachedData((draft) => {\n          //     draft.push(data)\n          //     console.log(draft)\n          //   })\n          // }\n\n          socket.on('ticker', ticker => {\n            console.log(ticker);\n            updateCachedData(currentCashData => currentCashData.tickers.push(ticker));\n          });\n        } catch {}\n\n        await cacheEntryRemoved;\n      }\n\n    })\n  })\n});\nexport const {\n  useGetStocksQuery\n} = stockApiSlice;","map":{"version":3,"sources":["/Users/g/Documents/myCodeProjects/finance-test-task/client/src/redux/stockApiSlice.js"],"names":["createApi","fetchBaseQuery","io","stockApiSlice","reducerPath","baseQuery","baseUrl","endpoints","builder","getStocks","query","queryFn","data","tickers","onCacheEntryAdded","arg","updateCachedData","cacheDataLoaded","cacheEntryRemoved","socket","on","console","log","ticker","currentCashData","push","useGetStocksQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAAC;AACrCI,EAAAA,WAAW,EAAE,eADwB;AAErCC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFY;AAGrCC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACrBC,IAAAA,SAAS,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBC,MAAAA,OAAO,EAAE,OAAO;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAR,OAAP,CADc;;AAEvB,YAAMC,iBAAN,CACEC,GADF,EAEE;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCC,QAAAA;AAArC,OAFF,EAGE;AAEA,YAAI;AACF,gBAAMD,eAAN;AACA,gBAAME,MAAM,GAAGjB,EAAE,CAAC,uBAAD,CAAjB;AACAiB,UAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,WAFD;AAIAH,UAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvBC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAED,WAHD,EAPE,CAaF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEAH,UAAAA,MAAM,CAACC,EAAP,CAAU,QAAV,EAAqBG,MAAD,IAAY;AAC9BF,YAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAP,YAAAA,gBAAgB,CAAEQ,eAAD,IAAqBA,eAAe,CAACX,OAAhB,CAAwBY,IAAxB,CAA6BF,MAA7B,CAAtB,CAAhB;AAED,WAJD;AAKD,SA5BD,CA4BE,MAAM,CAEP;;AACD,cAAML,iBAAN;AAED;;AAxCsB,KAAd;AADU,GAAL;AAHmB,CAAD,CAA/B;AAiDP,OAAO,MAAM;AAAEQ,EAAAA;AAAF,IAAwBvB,aAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { io } from 'socket.io-client';\n\nexport const stockApiSlice = createApi({\n  reducerPath: 'stockApiSlice',\n  baseQuery: fetchBaseQuery({ baseUrl: '/'}),\n  endpoints: builder => ({\n    getStocks: builder.query({\n      queryFn: () => ({ data: { tickers: [] }}),\n      async onCacheEntryAdded(\n        arg, \n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n    \n        try {\n          await cacheDataLoaded;\n          const socket = io('http://localhost:4000');\n          socket.on('connection', () => {\n            console.log('connected')\n          })\n\n          socket.on('start', () => {\n            console.log('started')\n            \n          })\n          \n\n          // const listener = (event) => {\n          //   const data = JSON.parse(event.data)\n          //   if ( data !== arg ) return\n\n          //   updateCachedData((draft) => {\n          //     draft.push(data)\n          //     console.log(draft)\n          //   })\n          // }\n\n          socket.on('ticker', (ticker) => {\n            console.log(ticker)\n            updateCachedData((currentCashData) => currentCashData.tickers.push(ticker))\n            \n          })\n        } catch {\n\n        }\n        await cacheEntryRemoved;\n        \n      },\n    }),\n  }),\n})\n\nexport const { useGetStocksQuery } = stockApiSlice;"]},"metadata":{},"sourceType":"module"}